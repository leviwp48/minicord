
[uwsgi]
chdir = /app/
strict = true
module = app:app
enable-threads = true
vacuum = true                        ; Delete sockets during shutdown
single-interpreter = true
die-on-term = true                   ; Shutdown when receiving SIGTERM (default is respawn)

disable-logging = true               ; Disable built-in logging 
log-4xx = true                       ; but log 4xx's anyway
log-5xx = true                       ; and 5xx's

harakiri = 300                       ; forcefully kill workers after 300 seconds

master = true
chmod-socket = 666

max-requests = 5000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
max-worker-lifetime-delta = 10       ; add (worker_id * delta) seconds to the max_worker_lifetime value of each worker
reload-on-rss = 4096                 ; Restart workers after this much resident memory
worker-reload-mercy = 60             ; How long to wait before forcefully killing workers

cheaper-algo = busyness
# processes = 144                    ; Maximum number of workers allowed
cheaper = 16                         ; Minimum number of workers allowed
cheaper-initial = 16                 ; Workers created at startup
cheaper-overload = 1                 ; Length of a cycle in seconds
cheaper-step = 16                    ; How many workers to spawn at a time

cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
cheaper-busyness-min = 20            ; Below this threshold, kill workers (if stable for multiplier cycles)
cheaper-busyness-max = 70            ; Above this threshold, spawn new workers
cheaper-busyness-backlog-alert = 16  ; Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-step = 2    ; How many emergency workers to create if there are too many requests in the queue

socket = /config/app.sock

py-autoreload = 1                    ; Enable auto-reloading

#stats and monitoring
stats = :3030
stats-http = true
stats-no-cores = true
stats-minified = true

logformat-strftime = true
log-date = %%Y-%%m-%%dT%%H:%%M:%%S.%%3sZ
log-format = { "message": "[uWsgi] %(method) %(uri) %(status) %(msecs)ms", "@timestamp": "%(ftime)", "ecs": { "version": "8.4" }, "event": { "dataset": "uwsgi.access" }, "client": { "ip": "%(addr)" }, "url": { "path": "%(uri)", "host": "%(host)" }, "http": { "version": "%(proto)", "request": { "method": "%(method)", "headers": { "x-forwarded-for": "%(var.HTTP_X_FORWARDED_FOR)", "user-agent": "%(uagent)", "traceparent": "%(var.HTTP_TRACEPARENT)", "tracestate": "%(var.HTTP_TRACESTATE)", "content-type": "%(var.HTTP_CONTENT_TYPE)" }, "body": { "size": %(cl) } }, "response": { "status_code": %(status), "headers": {}, "duration": %(msecs), "body": { "size": %(rsize) } } }, "uwsgi": { "rss": "%(rss)", "worker": "%(wid)", "pid": "%(pid)" } }

# Dramatiq is not fork safe. The lazy-apps setting will ensure 
# that all app code is loaded after each worker process is forked.
# See details: https://dramatiq.io/troubleshooting.html
lazy-apps = true
